module CrawlerDev
  module Models
    type url_extract_text_params =
      {
        url: String,
        clean_text: bool,
        headers: ::Hash[Symbol, String],
        proxy: CrawlerDev::URLExtractTextParams::Proxy
      }
      & CrawlerDev::Internal::Type::request_parameters

    class URLExtractTextParams < CrawlerDev::Internal::Type::BaseModel
      extend CrawlerDev::Internal::Type::RequestParameters::Converter
      include CrawlerDev::Internal::Type::RequestParameters

      attr_accessor url: String

      attr_reader clean_text: bool?

      def clean_text=: (bool) -> bool

      attr_reader headers: ::Hash[Symbol, String]?

      def headers=: (::Hash[Symbol, String]) -> ::Hash[Symbol, String]

      attr_reader proxy: CrawlerDev::URLExtractTextParams::Proxy?

      def proxy=: (
        CrawlerDev::URLExtractTextParams::Proxy
      ) -> CrawlerDev::URLExtractTextParams::Proxy

      def initialize: (
        url: String,
        ?clean_text: bool,
        ?headers: ::Hash[Symbol, String],
        ?proxy: CrawlerDev::URLExtractTextParams::Proxy,
        ?request_options: CrawlerDev::request_opts
      ) -> void

      def to_hash: -> {
        url: String,
        clean_text: bool,
        headers: ::Hash[Symbol, String],
        proxy: CrawlerDev::URLExtractTextParams::Proxy,
        request_options: CrawlerDev::RequestOptions
      }

      type proxy = { password: String, server: String, username: String }

      class Proxy < CrawlerDev::Internal::Type::BaseModel
        attr_reader password: String?

        def password=: (String) -> String

        attr_reader server: String?

        def server=: (String) -> String

        attr_reader username: String?

        def username=: (String) -> String

        def initialize: (
          ?password: String,
          ?server: String,
          ?username: String
        ) -> void

        def to_hash: -> { password: String, server: String, username: String }
      end
    end
  end
end
